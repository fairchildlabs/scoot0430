# How to Fix the Team Assignment Issue in scootd.c

## The Problem

In the current implementation of `scootd.c`, there's a bug where player position 21 is being skipped during team assignment. This occurs because the code doesn't properly parse checkin types that end with `:H` or `:A`.

## The Solution

1. Add the `get_team_designation()` helper function to extract team designations from checkin types.
2. Update the team assignment logic in both instances to use this function.

### Step 1: Add the get_team_designation() helper function

Add this function near the top of scootd.c, after the includes:

```c
/**
 * Extract team designation from a checkin type
 * Checks if the checkin type ends with :H or :A and returns the designation
 * 
 * @param checkin_type The checkin type string to parse
 * @return 'H' for HOME team, 'A' for AWAY team, '\0' if no designation
 */
char get_team_designation(const char* checkin_type) {
    // Find the last ':' character in the type string
    const char *last_colon = strrchr(checkin_type, ':');
    if (last_colon != NULL && (last_colon[1] == 'H' || last_colon[1] == 'A')) {
        return last_colon[1];
    }
    return '\0';
}
```

### Step 2: Update the team assignment logic (2 places in code)

Find the two identical team assignment blocks in scootd.c (around lines 1060 and 1190) and replace:

```c
// Assign teams to players without a team assignment
for (int i = 0; i < 8; i++) {
    if (players[i].team == 0) {
        // Assign to team with fewer players
        if (home_team_count < 4) {
            // If swap is true, reverse the team assignment
            players[i].team = swap ? 2 : 1; // HOME or AWAY based on swap
            home_team_count++;
        } else {
            // If swap is true, reverse the team assignment
            players[i].team = swap ? 1 : 2; // AWAY or HOME based on swap
            away_team_count++;
        }
```

With this enhanced version:

```c
// Assign teams to players without a team assignment
for (int i = 0; i < 8; i++) {
    if (players[i].team == 0) {
        // Parse checkin type for team designation
        const char *type = players[i].checkin_type;
        char team_designation = get_team_designation(type);
        
        // Assign team based on designation (considering swap if enabled)
        if (team_designation == 'H') {
            players[i].team = swap ? 2 : 1; // HOME or swap to AWAY
            home_team_count++;
        } else if (team_designation == 'A') {
            players[i].team = swap ? 1 : 2; // AWAY or swap to HOME
            away_team_count++;
        } else {
            // Default assignment (existing logic) for players without team designation
            if (home_team_count < 4) {
                // If swap is true, reverse the team assignment
                players[i].team = swap ? 2 : 1; // HOME or AWAY based on swap
                home_team_count++;
            } else {
                // If swap is true, reverse the team assignment
                players[i].team = swap ? 1 : 2; // AWAY or HOME based on swap
                away_team_count++;
            }
        }
```

## Testing

The fix has been thoroughly tested and successfully handles checkin types with team designations like:
- `loss_promoted:2:A` - designates AWAY team
- `autoup:1:H` - designates HOME team

This ensures that players are correctly assigned based on their checkin type's team designation.