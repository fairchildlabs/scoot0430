        // Completed games
        printf("  \"completed_games\": [\n");
        for (int i = 0; i < completed_games_count; i++) {
            int game_id = atoi(PQgetvalue(completed_games_result, i, 0));
            const char *court = PQgetvalue(completed_games_result, i, 1);
            const char *start_time = PQgetvalue(completed_games_result, i, 2);
            const char *end_time = PQgetvalue(completed_games_result, i, 3);
            int team1_score = atoi(PQgetvalue(completed_games_result, i, 4));
            int team2_score = atoi(PQgetvalue(completed_games_result, i, 5));
            
            printf("    {\n");
            printf("      \"id\": %d,\n", game_id);
            printf("      \"court\": \"%s\",\n", court);
            printf("      \"start_time\": \"%s\",\n", start_time);
            printf("      \"end_time\": \"%s\",\n", end_time);
            printf("      \"team1_score\": %d,\n", team1_score);
            printf("      \"team2_score\": %d,\n", team2_score);
            printf("      \"result\": \"%s\",\n", 
                  team1_score == team2_score ? "Tie" : 
                  team1_score > team2_score ? "Team 1 won" : "Team 2 won");
            
            // Get players for this game
            char game_id_str[16];
            sprintf(game_id_str, "%d", game_id);
            const char *game_params[1] = { game_id_str };
            
            const char *players_query = 
                "SELECT gp.team, gp.relative_position, c.queue_position, u.username "
                "FROM game_players gp "
                "JOIN users u ON gp.user_id = u.id "
                "JOIN checkins c ON u.id = c.user_id AND c.game_id = gp.game_id "
                "WHERE gp.game_id = $1 "
                "ORDER BY gp.team, gp.relative_position";
            
            PGresult *players_result = PQexecParams(conn, players_query, 1, NULL, game_params, NULL, NULL, 0);
            
            if (PQresultStatus(players_result) == PGRES_TUPLES_OK) {
                int player_count = PQntuples(players_result);
                
                printf("      \"players\": [\n");
                for (int j = 0; j < player_count; j++) {
                    int team = atoi(PQgetvalue(players_result, j, 0));
                    int relative_position = atoi(PQgetvalue(players_result, j, 1));
                    int queue_position = atoi(PQgetvalue(players_result, j, 2));
                    const char *username = PQgetvalue(players_result, j, 3);
                    
                    printf("        {\n");
                    printf("          \"username\": \"%s\",\n", username);
                    printf("          \"team\": %d,\n", team);
                    printf("          \"relative_position\": %d,\n", relative_position);
                    printf("          \"queue_position\": %d\n", queue_position);
                    if (j < player_count - 1) {
                        printf("        },\n");
                    } else {
                        printf("        }\n");
                    }
                }
                printf("      ]\n");
                
                PQclear(players_result);
            } else {
                printf("      \"players\": []\n");
            }
            
            if (i < completed_games_count - 1) {
                printf("    },\n");
            } else {
                printf("    }\n");
            }
        }
        printf("  ]\n");
